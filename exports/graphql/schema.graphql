input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Agente {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String!
  telefono: String!
  email: String!
  published_at: DateTime
}

type AgenteConnection {
  values: [Agente]
  groupBy: AgenteGroupBy
  aggregate: AgenteAggregator
}

type AgenteAggregator {
  count: Int
  totalCount: Int
}

type AgenteGroupBy {
  id: [AgenteConnectionId]
  _id: [AgenteConnection_id]
  createdAt: [AgenteConnectionCreatedAt]
  updatedAt: [AgenteConnectionUpdatedAt]
  nombre: [AgenteConnectionNombre]
  telefono: [AgenteConnectionTelefono]
  email: [AgenteConnectionEmail]
  published_at: [AgenteConnectionPublished_at]
}

type AgenteConnectionId {
  key: ID
  connection: AgenteConnection
}

type AgenteConnection_id {
  key: ID
  connection: AgenteConnection
}

type AgenteConnectionCreatedAt {
  key: DateTime
  connection: AgenteConnection
}

type AgenteConnectionUpdatedAt {
  key: DateTime
  connection: AgenteConnection
}

type AgenteConnectionNombre {
  key: String
  connection: AgenteConnection
}

type AgenteConnectionTelefono {
  key: String
  connection: AgenteConnection
}

type AgenteConnectionEmail {
  key: String
  connection: AgenteConnection
}

type AgenteConnectionPublished_at {
  key: DateTime
  connection: AgenteConnection
}

input AgenteInput {
  nombre: String!
  telefono: String!
  email: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAgenteInput {
  nombre: String
  telefono: String
  email: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAgenteInput {
  data: AgenteInput
}

type createAgentePayload {
  agente: Agente
}

input updateAgenteInput {
  where: InputID
  data: editAgenteInput
}

type updateAgentePayload {
  agente: Agente
}

input deleteAgenteInput {
  where: InputID
}

type deleteAgentePayload {
  agente: Agente
}

type Categoria {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Nombre: String
  published_at: DateTime
}

type CategoriaConnection {
  values: [Categoria]
  groupBy: CategoriaGroupBy
  aggregate: CategoriaAggregator
}

type CategoriaAggregator {
  count: Int
  totalCount: Int
}

type CategoriaGroupBy {
  id: [CategoriaConnectionId]
  _id: [CategoriaConnection_id]
  createdAt: [CategoriaConnectionCreatedAt]
  updatedAt: [CategoriaConnectionUpdatedAt]
  Nombre: [CategoriaConnectionNombre]
  published_at: [CategoriaConnectionPublished_at]
}

type CategoriaConnectionId {
  key: ID
  connection: CategoriaConnection
}

type CategoriaConnection_id {
  key: ID
  connection: CategoriaConnection
}

type CategoriaConnectionCreatedAt {
  key: DateTime
  connection: CategoriaConnection
}

type CategoriaConnectionUpdatedAt {
  key: DateTime
  connection: CategoriaConnection
}

type CategoriaConnectionNombre {
  key: String
  connection: CategoriaConnection
}

type CategoriaConnectionPublished_at {
  key: DateTime
  connection: CategoriaConnection
}

input CategoriaInput {
  Nombre: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoriaInput {
  Nombre: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCategoriaInput {
  data: CategoriaInput
}

type createCategoriaPayload {
  categoria: Categoria
}

input updateCategoriaInput {
  where: InputID
  data: editCategoriaInput
}

type updateCategoriaPayload {
  categoria: Categoria
}

input deleteCategoriaInput {
  where: InputID
}

type deleteCategoriaPayload {
  categoria: Categoria
}

type Propiedades {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String!
  habitaciones: Int!
  estacionamiento: Int!
  wc: Int!
  descripcion: String!
  categoria: Categoria
  agente: Agente
  published_at: DateTime
  imagen(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type PropiedadesConnection {
  values: [Propiedades]
  groupBy: PropiedadesGroupBy
  aggregate: PropiedadesAggregator
}

type PropiedadesAggregator {
  count: Int
  totalCount: Int
  sum: PropiedadesAggregatorSum
  avg: PropiedadesAggregatorAvg
  min: PropiedadesAggregatorMin
  max: PropiedadesAggregatorMax
}

type PropiedadesAggregatorSum {
  habitaciones: Float
  estacionamiento: Float
  wc: Float
}

type PropiedadesAggregatorAvg {
  habitaciones: Float
  estacionamiento: Float
  wc: Float
}

type PropiedadesAggregatorMin {
  habitaciones: Float
  estacionamiento: Float
  wc: Float
}

type PropiedadesAggregatorMax {
  habitaciones: Float
  estacionamiento: Float
  wc: Float
}

type PropiedadesGroupBy {
  id: [PropiedadesConnectionId]
  _id: [PropiedadesConnection_id]
  createdAt: [PropiedadesConnectionCreatedAt]
  updatedAt: [PropiedadesConnectionUpdatedAt]
  nombre: [PropiedadesConnectionNombre]
  habitaciones: [PropiedadesConnectionHabitaciones]
  estacionamiento: [PropiedadesConnectionEstacionamiento]
  wc: [PropiedadesConnectionWc]
  descripcion: [PropiedadesConnectionDescripcion]
  categoria: [PropiedadesConnectionCategoria]
  agente: [PropiedadesConnectionAgente]
  published_at: [PropiedadesConnectionPublished_at]
}

type PropiedadesConnectionId {
  key: ID
  connection: PropiedadesConnection
}

type PropiedadesConnection_id {
  key: ID
  connection: PropiedadesConnection
}

type PropiedadesConnectionCreatedAt {
  key: DateTime
  connection: PropiedadesConnection
}

type PropiedadesConnectionUpdatedAt {
  key: DateTime
  connection: PropiedadesConnection
}

type PropiedadesConnectionNombre {
  key: String
  connection: PropiedadesConnection
}

type PropiedadesConnectionHabitaciones {
  key: Int
  connection: PropiedadesConnection
}

type PropiedadesConnectionEstacionamiento {
  key: Int
  connection: PropiedadesConnection
}

type PropiedadesConnectionWc {
  key: Int
  connection: PropiedadesConnection
}

type PropiedadesConnectionDescripcion {
  key: String
  connection: PropiedadesConnection
}

type PropiedadesConnectionCategoria {
  key: ID
  connection: PropiedadesConnection
}

type PropiedadesConnectionAgente {
  key: ID
  connection: PropiedadesConnection
}

type PropiedadesConnectionPublished_at {
  key: DateTime
  connection: PropiedadesConnection
}

input PropiedadeInput {
  nombre: String!
  habitaciones: Int!
  estacionamiento: Int!
  wc: Int!
  descripcion: String!
  imagen: [ID]
  categoria: ID
  agente: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPropiedadeInput {
  nombre: String
  habitaciones: Int
  estacionamiento: Int
  wc: Int
  descripcion: String
  imagen: [ID]
  categoria: ID
  agente: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPropiedadeInput {
  data: PropiedadeInput
}

type createPropiedadePayload {
  propiedade: Propiedades
}

input updatePropiedadeInput {
  where: InputID
  data: editPropiedadeInput
}

type updatePropiedadePayload {
  propiedade: Propiedades
}

input deletePropiedadeInput {
  where: InputID
}

type deletePropiedadePayload {
  propiedade: Propiedades
}

type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Agente | AgenteConnection | AgenteAggregator | AgenteGroupBy | AgenteConnectionId | AgenteConnection_id | AgenteConnectionCreatedAt | AgenteConnectionUpdatedAt | AgenteConnectionNombre | AgenteConnectionTelefono | AgenteConnectionEmail | AgenteConnectionPublished_at | createAgentePayload | updateAgentePayload | deleteAgentePayload | Categoria | CategoriaConnection | CategoriaAggregator | CategoriaGroupBy | CategoriaConnectionId | CategoriaConnection_id | CategoriaConnectionCreatedAt | CategoriaConnectionUpdatedAt | CategoriaConnectionNombre | CategoriaConnectionPublished_at | createCategoriaPayload | updateCategoriaPayload | deleteCategoriaPayload | Propiedades | PropiedadesConnection | PropiedadesAggregator | PropiedadesAggregatorSum | PropiedadesAggregatorAvg | PropiedadesAggregatorMin | PropiedadesAggregatorMax | PropiedadesGroupBy | PropiedadesConnectionId | PropiedadesConnection_id | PropiedadesConnectionCreatedAt | PropiedadesConnectionUpdatedAt | PropiedadesConnectionNombre | PropiedadesConnectionHabitaciones | PropiedadesConnectionEstacionamiento | PropiedadesConnectionWc | PropiedadesConnectionDescripcion | PropiedadesConnectionCategoria | PropiedadesConnectionAgente | PropiedadesConnectionPublished_at | createPropiedadePayload | updatePropiedadePayload | deletePropiedadePayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  agente(id: ID!, publicationState: PublicationState): Agente
  agentes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Agente]
  agentesConnection(sort: String, limit: Int, start: Int, where: JSON): AgenteConnection
  categoria(id: ID!, publicationState: PublicationState): Categoria
  categorias(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Categoria]
  categoriasConnection(sort: String, limit: Int, start: Int, where: JSON): CategoriaConnection
  propiedade(id: ID!, publicationState: PublicationState): Propiedades
  propiedades(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Propiedades]
  propiedadesConnection(sort: String, limit: Int, start: Int, where: JSON): PropiedadesConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAgente(input: createAgenteInput): createAgentePayload
  updateAgente(input: updateAgenteInput): updateAgentePayload
  deleteAgente(input: deleteAgenteInput): deleteAgentePayload
  createCategoria(input: createCategoriaInput): createCategoriaPayload
  updateCategoria(input: updateCategoriaInput): updateCategoriaPayload
  deleteCategoria(input: deleteCategoriaInput): deleteCategoriaPayload
  createPropiedade(input: createPropiedadeInput): createPropiedadePayload
  updatePropiedade(input: updatePropiedadeInput): updatePropiedadePayload
  deletePropiedade(input: deletePropiedadeInput): deletePropiedadePayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
